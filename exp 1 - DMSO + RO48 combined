# setup
library(Seurat)
library(dplyr)

# DMSO 
dmso.data <- Read10X(data.dir = "C:/Users/JBH141/Documents/Seurat/hg19/dmso/")
dmso<- CreateSeuratObject(counts = dmso.data, project = "matrix", min.cells = 3, min.features = 200)
dmso$stim <- "DMSO"
dmso[["percent.mt"]] <- PercentageFeatureSet(dmso, pattern = "^mt-")
VlnPlot(dmso, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(dmso, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(dmso, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
dmso <- subset(dmso, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
dmso <- NormalizeData(dmso, normalization.method = "LogNormalize", scale.factor = 10000)
dmso <- FindVariableFeatures(dmso, selection.method = "vst", nfeatures = 1000)



# RO48 
ro48.data <- Read10X(data.dir = "C:/Users/JBH141/Documents/Seurat/hg19/ro48/")
ro48<- CreateSeuratObject(counts = ro48.data, project = "matrix", min.cells = 3, min.features = 200)
ro48$stim <- "RO48"
ro48[["percent.mt"]] <- PercentageFeatureSet(ro48, pattern = "^mt-")
VlnPlot(ro48, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(ro48, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(ro48, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
ro48 <- subset(ro48, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
ro48 <- NormalizeData(ro48, normalization.method = "LogNormalize", scale.factor = 10000)
ro48 <- FindVariableFeatures(ro48, selection.method = "vst", nfeatures = 1000)                                    


# integration
dmso <- RenameCells(dmso, add.cell.id = "DMSO_")
immune.anchors <- FindIntegrationAnchors(object.list = list(dmso, ro48), dims = 1:20)
immune.combined <- IntegrateData(anchorset = immune.anchors, dims = 1:20)
DefaultAssay(immune.combined) <- "integrated"
immune.combined <- ScaleData(immune.combined, verbose = T)
immune.combined <- RunPCA(immune.combined, npcs = 30, verbose = FALSE)


# t-SNE and clustering
immune.combined <- RunUMAP(immune.combined, reduction = "pca", dims = 1:20)
immune.combined <- FindNeighbors(immune.combined, reduction = "pca", dims = 1:20)
immune.combined <- FindClusters(immune.combined, resolution = 0.5)


# visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(immune.combined, reduction = "umap", split.by = "stim")


# identify conserved cell type markers
DefaultAssay(immune.combined) <- "RNA"
nk.markers <- FindConservedMarkers(immune.combined, ident.1 = 7, grouping.var = "stim", verbose = FALSE)
head(nk.markers)
FeaturePlot(immune.combined, features = c(, "Brinp3", "Garnl3", "Zbtb20", "Dock10", "C1qb", "Slc1a3", 
                                          "Rgs9"), min.cutoff = "q9")
immune.combined <- RenameIdents(immune.combined, `0` = "CD14 Mono", `1` = "CD4 Naive T", `2` = "CD4 Memory T", 
                                `3` = "CD16 Mono", `4` = "B", `5` = "CD8 T", `6` = "T activated", `7` = "NK", `8` = "DC", `9` = "B Activated", 
                                `10` = "Mk", `11` = "pDC", `12` = "Eryth", `13` = "Mono/Mk Doublets")
DimPlot(immune.combined, label = TRUE)


# step 4 clustering excitatory neurons 
dmso <- CreateSeuratObject(dmso.data, project = "dmso")
dmso <- subset(dmso, subset.names = c("nGene", "excitatory"), low.thresholds = c(500, -Inf), high.thresholds = c(Inf, 0.15))

dmso <- NormalizeData(dmso)
dmso <- FindVariableFeatures(dmso.data = F, display.progress = F)

## always scale z score for PCA
dmso<- ScaleData(object = dmso, vars.to.regress = c("nUMI", "percent.mito"))

# graph based clustering
dmso <- FindClusters(dmso,resolution = 0.6, dims.use = 1:10)

dmso@meta.data$k.means.clusters <- kmeans

# Plot UMAP, and colour cells by k-means identity
RunUMAP(object = object, group.by = "k.means.clusters")
